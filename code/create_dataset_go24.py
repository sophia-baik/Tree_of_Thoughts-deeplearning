# -*- coding: utf-8 -*-
"""game_of_24_solver.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f9gpUhiIlekgqKV53hsAr3P6stD1D5go
"""

from google.colab import files
import itertools
import operator
import pandas as pd
from tabulate import tabulate

ops = {
    '+': operator.add,
    '-': operator.sub,
    '*': operator.mul,
    '/': operator.truediv
}

max_n = 13

# Enumerate all possible parentheses positions


def enumerate_expressions(a, b, c, d, op1, op2, op3):
    return [
        f"(({a} {op1} {b}) {op2} {c}) {op3} {d}",
        f"({a} {op1} ({b} {op2} {c})) {op3} {d}",
        f"{a} {op1} (({b} {op2} {c}) {op3} {d})",
        f"{a} {op1} ({b} {op2} ({c} {op3} {d}))",
        f"({a} {op1} {b}) {op2} ({c} {op3} {d})"
    ]


def solve_24(nums):
    num_solutions = 0
    for permutation in itertools.permutations(nums):
        for op1, op2, op3 in itertools.product(ops, repeat=3):
            expressions = enumerate_expressions(*permutation, op1, op2, op3)
            for expression in expressions:
                try:
                    if abs(eval(expression) - 24) < 1e-6:
                        # print(expression)
                        num_solutions += 1
                except ZeroDivisionError:
                    pass
    return num_solutions


def classify_difficulty(num_solutions):
    if num_solutions >= 20:
        return "Easy"
    elif num_solutions >= 10:
        return "Medium"
    elif num_solutions == 0:
        return "Impossible"
    else:
        return "Hard"


def generate_multiple_games():
    games = []
    for i in range(1, max_n+1):
        for j in range(i, max_n+1):
            for k in range(j, max_n+1):
                for l in range(k, max_n+1):
                    nums = [i, j, k, l]
                    num_solutions = solve_24(nums)
                    difficulty = classify_difficulty(num_solutions)
                    if difficulty != "Impossible":
                        games.append({
                            'numbers': nums,
                            'num_solutions': num_solutions,
                            'difficulty': difficulty
                        })
    return pd.DataFrame(games)


df = generate_multiple_games()
df = df.sort_values(by='num_solutions', ascending=True)

files.download("data/24game_problems.csv")

print(tabulate(df, headers='keys', tablefmt='pretty', showindex=False))
